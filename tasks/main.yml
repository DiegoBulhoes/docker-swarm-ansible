---
- name: Install operating system packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - gnupg-agent
      - software-properties-common
    update_cache: yes

- name: Add an Apt subscription key - Docker
  apt_key:
    url: "{{ docker_apt_key_url }}"
    state: present

- name: Configure Docker's upstream APT repository
  apt_repository:
    repo: "{{ docker_apt_repository }}"
    update_cache: true

- name: "Install operating system packages"
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    update_cache: yes

- name: Download docker-compose.
  get_url:
    url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_userspace_architecture }}"
    dest: "/usr/local/bin/docker-compose"
    mode: "0755"

- name: Get the information from the Docker
  shell: docker info
  changed_when: False
  register: docker_info

- name: Init Swarm - First manager.
  shell: docker swarm init
    --listen-addr {{ swarm_ip_internal_manager }}
    --advertise-addr {{ swarm_ip_internal_manager }}
  when: "docker_info is search('inactive') and inventory_hostname == swarm_ip_external_manager"

- name: Get token - Manager
  shell: docker swarm join-token -q manager
  changed_when: False
  register: docker_manager_token
  delegate_to: "{{ swarm_ip_external_manager}}"

- name: Add manager to the cluster
  shell: docker swarm join --token "{{ docker_manager_token.stdout }}"    {{ swarm_ip_internal_manager}}:{{swarm_port}}
  when: "docker_info is search('inactive')
    and 'manager' in group_names
    and inventory_hostname != swarm_ip_external_manager"

- name: Check the status of Docker Swarm
  shell: docker info
  changed_when: False
  register: docker_info

- name: Get token - Worker.
  shell: docker swarm join-token -q worker
  changed_when: False
  register: docker_worker_token
  delegate_to: "{{ swarm_ip_external_manager }}"

- name: Add worker to the cluster
  shell: docker swarm join --token "{{ docker_worker_token.stdout }}"   {{swarm_ip_internal_manager}}:{{swarm_port}}
  when: "docker_info is search('inactive')
    and 'worker' in group_names"
